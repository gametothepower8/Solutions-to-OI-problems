// build min cost flow graph
#include<bits/stdc++.h>
using namespace std;
template <typename T, typename C>
class mcmf {
  public:
  static constexpr T eps = (T) 1e-9;
  struct edge {
    int from;
    int to;
    T c;
    T f;
    C cost;
  };
  vector< vector<int> > g;
  vector<edge> edges;
  vector<C> d;
  vector<int> q;
  vector<bool> in_queue;
  vector<int> pe;
  int n;
  int st, fin;
  T flow;
  C cost;
  mcmf(int _n, int _st, int _fin) : n(_n), st(_st), fin(_fin) {
    assert(0 <= st && st < n && 0 <= fin && fin < n && st != fin);
    g.resize(n);
    d.resize(n);
    in_queue.resize(n);
    pe.resize(n);
    flow = 0;
    cost = 0;
  }
  void clear_flow() {
    for (const edge &e : edges) {
      e.f = 0;
    }
    flow = 0;
  }
   
  void add(int from, int to, T forward_cap, T backward_cap, C cost) {
    assert(0 <= from && from < n && 0 <= to && to < n);
    g[from].push_back((int) edges.size());
    edges.push_back({from, to, forward_cap, 0, cost});
    g[to].push_back((int) edges.size());
    edges.push_back({to, from, backward_cap, 0, -cost});
  }
  bool expath() {
    fill(d.begin(), d.end(), numeric_limits<C>::max());
    q.clear();
    q.push_back(st);
    d[st] = 0;
    in_queue[st] = true;
    int beg = 0;
    bool found = false;
    while (beg < (int) q.size()) {
      int i = q[beg++];
      if (i == fin) {
        found = true;
      }
      in_queue[i] = false;
      for (int id : g[i]) {
        const edge &e = edges[id];
        if (e.c - e.f > eps && d[i] + e.cost < d[e.to]) {
          d[e.to] = d[i] + e.cost;
          pe[e.to] = id;
          if (!in_queue[e.to]) {
            q.push_back(e.to);
            in_queue[e.to] = true;
          }
        }
      }
    }
    if (found) {
      T push = numeric_limits<T>::max();
      int v = fin;
      while (v != st) {
        const edge &e = edges[pe[v]];
        push = min(push, e.c - e.f);
        v = e.from;
      }
      v = fin;
      while (v != st) {
        edge &e = edges[pe[v]];
        e.f += push;
        edge &back = edges[pe[v] ^ 1];
        back.f -= push;
        v = e.from;
      }
      flow += push;
      cost += push * d[fin];
    }
    return found;
  }
   
  pair<T, C> max_flow_min_cost() {
    while (expath()) {
    }
    return make_pair(flow, cost);
  }
};
int n,k;
int p[101][26];
void solve(){
	cin >> n >> k;
	for(int i=1; i<=n ;i++){
		for(int j=1; j<=k ;j++){
			cin >> p[i][j];
		}
	}
	mcmf<int,int>g(2*n+2,0,2*n+1);
	for(int i=1; i<=n ;i++){
		g.add(0,i,1,0,0);
		g.add(n+i,2*n+1,1,0,0);
		g.add(i,n+i,1,0,0);
		for(int j=1; j<=n ;j++){
			bool ok=true;
			for(int x=1; x<=k ;x++){
				if(p[i][x]<=p[j][x]) ok=false;
			}
			if(ok) g.add(n+i,j,1,0,-1);
		}
	}
	for(int i=1; i<=n ;i++){
		g.expath();
		if(g.cost==i-n){
			cout << i << endl;
			return;
		}
	}
}//min cost flow from Gennady Korotkevich
int main(){
	ios::sync_with_stdio(false);
	freopen("C-large-practice.in","r",stdin);
	freopen("jj.txt","w",stdout);
	int t;cin >> t;
	for(int i=1; i<=t ;i++){
		cout << "Case #" << i << ": ";
		solve();
	}
}
